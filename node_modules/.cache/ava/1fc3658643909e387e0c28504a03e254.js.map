{"version":3,"sources":["db-test.js"],"names":["test","require","uuid","r","Db","dbName","v4","db","before","t","connect","true","connected","after","false","always","conn","dbDrop","run","is","saveImage","image","description","url","jpg","likes","liked","user_id","created","deepEquals","tags","id","public_id","enconde","truthy","createdAt"],"mappings":"AAAA;;;;;;;AAEA,MAAMA,OAAOC,QAAQ,KAAR,CAAb;AACA,MAAMC,OAAOD,QAAQ,aAAR,CAAb;AACA,MAAME,IAAIF,QAAQ,WAAR,CAAV;AACA,MAAMG,KAAKH,QAAQ,KAAR,CAAX;AACA,MAAMI,SAAU,cAAaH,KAAKI,EAAL,EAAU,EAAvC;AACA,MAAMC,KAAK,IAAIH,EAAJ,CAAO,EAAEG,IAAIF,MAAN,EAAP,CAAX;;AAEAL,KAAKQ,MAAL,CAAY,gBAAZ;AAAA,+BAA8B,WAAMC,CAAN,EAAW;AAAA;;AACvC,UAAMF,GAAGG,OAAH,EAAN;AACAD,MAAEE,IAAF,uBAAO,qCAAGC,SAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAqB,qBAArB;AACD,GAHD;;AAAA;AAAA;AAAA;AAAA;;AAKAZ,KAAKa,KAAL,CAAW,qBAAX;AAAA,gCAAkC,WAAMJ,CAAN,EAAW;AAAA;;AAC3CA,MAAEK,KAAF,yBAAQ,sCAAGF,SAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAsB,wBAAtB;AACD,GAFD;;AAAA;AAAA;AAAA;AAAA;;AAIAZ,KAAKa,KAAL,CAAWE,MAAX,CAAkB,kBAAlB;AAAA,gCAAsC,WAAMN,CAAN,EAAW;AAC/C,QAAIO,OAAO,MAAMb,EAAEO,OAAF,CAAU,EAAV,CAAjB;AACA,UAAMP,EAAEc,MAAF,CAASZ,MAAT,EAAiBa,GAAjB,CAAqBF,IAArB,CAAN;AACD,GAHD;;AAAA;AAAA;AAAA;AAAA;;AAKAhB,KAAK,YAAL;AAAA,gCAAmB,WAAMS,CAAN,EAAW;AAAA;;AAC5BA,MAAEU,EAAF,CAAK,OAAOZ,GAAGa,SAAf,EAA0B,UAA1B,EAAsC,yBAAtC;;AAEA,QAAIC,QAAQ;AACVC,mBAAa,wCADH;AAEVC,WAAM,2BAA0BrB,KAAKI,EAAL,GAAUkB,GAAI,EAFpC;AAGVC,aAAO,CAHG;AAIVC,aAAO,KAJG;AAKVC,eAASzB,KAAKA,IAAL;AALC,KAAZ;;AAQA,QAAI0B,UAAU,MAAMrB,GAAGa,SAAH,CAAaC,KAAb,CAApB;AACAZ,MAAEU,EAAF,CAAKS,QAAQN,WAAb,EAA0BD,MAAMC,WAAhC;AACAb,MAAEU,EAAF,CAAKS,QAAQL,GAAb,EAAkBF,MAAME,GAAxB;AACAd,MAAEU,EAAF,CAAKS,QAAQH,KAAb,EAAoBJ,MAAMI,KAA1B;AACAhB,MAAEU,EAAF,CAAKS,QAAQF,KAAb,EAAoBL,MAAMK,KAA1B;AACAjB,MAAEoB,UAAF,CAAaD,QAAQE,IAArB,EAA2B,CAAE,SAAF,EAAa,MAAb,EAAqB,QAArB,CAA3B;AACArB,MAAEU,EAAF,CAAKS,QAAQD,OAAb,EAAsBN,MAAMM,OAA5B;AACAlB,MAAEU,EAAF,CAAK,OAAOS,QAAQG,EAApB,EAAwB,QAAxB;AACAtB,MAAEU,EAAF,CAAKS,QAAQI,SAAb,EAAwB9B,KAAK+B,OAAL,CAAaL,QAAQG,EAArB,CAAxB;AACAtB,MAAEyB,MAAF,yBAAS,2CAAQC,SAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACD,GArBD;;AAAA;AAAA;AAAA;AAAA","file":"db-test.js","sourcesContent":["'use strict'\n\nconst test = require('ava')\nconst uuid = require('uuid-base62')\nconst r = require('rethinkdb')\nconst Db = require('../')\nconst dbName = `platzigram_${uuid.v4()}`\nconst db = new Db({ db: dbName })\n\ntest.before('setup database', async t => {\n  await db.connect()\n  t.true(db.connected, 'Should be connected')\n})\n\ntest.after('disconnect database', async t => {\n  t.false(db.connected, 'Should be disconnected')\n})\n\ntest.after.always('cleanup database', async t => {\n  let conn = await r.connect({})\n  await r.dbDrop(dbName).run(conn)\n})\n\ntest('save image', async t => {\n  t.is(typeof db.saveImage, 'function', 'saveImage is a function')\n\n  let image = {\n    description: 'an #awesome picture with #tags #platzi',\n    url: `https://platzigram.test/${uuid.v4().jpg}`,\n    likes: 0,\n    liked: false,\n    user_id: uuid.uuid()\n  }\n\n  let created = await db.saveImage(image)\n  t.is(created.description, image.description)\n  t.is(created.url, image.url)\n  t.is(created.likes, image.likes)\n  t.is(created.liked, image.liked)\n  t.deepEquals(created.tags, [ 'awesome', 'tags', 'platzi' ])\n  t.is(created.user_id, image.user_id)\n  t.is(typeof created.id, 'string')\n  t.is(created.public_id, uuid.enconde(created.id))\n  t.truthy(created.createdAt)\n})\n"]}